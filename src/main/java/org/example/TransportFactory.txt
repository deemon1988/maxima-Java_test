///////////////////////////////////////////////////////////////////////////////////////////////////////////////
TransportFactory.java
//////////////////////////////////////////////////////////////////////////////////////////////////////////////

package org.example;


public class TransportFactory implements TransportCreater{



    Transport getTransport(City city, int weight, int hours) {
        final String SHIP_NAME = "Новый Корабль";
        final String TRUCK_NAME = "Новый Грузовик";
        final String PLANE_NAME = "Новый Самолёт";
        final float SHIP_PRICE = 30.05f;
        final float TRUCK_PRICE = 10.03f;
        final float PLANE_PRICE = 50.01f;
        Transport transport = null;
        int speed;

        speed = city.getDistance() / hours;     // скорость с которой должен двигаться транспорт для доставки в срок
        if (speed < 40 && city.isOnWater()) transport = new Ship(SHIP_NAME, rWeight(weight), rSpeed(speed), SHIP_PRICE);
        if (speed > 120 && city.isHasAirport()) transport = new Plane(PLANE_NAME, rWeight(weight), rSpeed(speed), PLANE_PRICE);
        if (speed > 40 && speed <120) transport = new Truck(TRUCK_NAME, rWeight(weight),rSpeed(speed), PLANE_PRICE);


        System.out.println(transport.getName()+" - грузоподъёмность "+transport.getCapacity()+" скорость "+transport.getSpeed());
        return transport;
        }


    public static int rWeight(int a){  // необходимая грузоподъемность
        if (Math.round(a) % 500 == 0) {
        } else {
            while (a % 500 != 0) {
                a ++;
            }
        }
        return a;
    }

    public int rSpeed(int b){  // метод для округления скорости
        if (b%10 ==0) return b;
        else {
            while (b%10 !=0) {b++;}
            Math.round(b);
        }

        return b;
    }




    @Override
    public TransportFactory createTransport() {
        return new TransportFactory();
    }
}




///////////////////////////////////////////////////////////////////////////////////////////////////////////
Это Interface - TransportCreater
/////////////////////////////////////////////////////////


package org.example;

public interface TransportCreater {
    TransportFactory createTransport ();
}





////////////////////////////////////////////////////////////////////////////////////////////////////////
App.java
///////////////////////////////////////////////////////////////////////////////////////////////////

package org.example;

public class App
{
    public static void main( String[] args )
    {
        City Spb = new City("Санкт-Петербург", 98, true, true);
        City Murmansk = new City("Мурманск",1400,true, false);
        City Tver = new City("Тверь", 540);
        City Mosсow = new City("Москва", 800, true, true);

        Truck trailer_truck = new Truck("Грузовик с полуприцепом", 44000, 90, 50.41 );
        Ship tanker = new Ship("Танкер",18159000, 27, 300.82);
        Plane aircraft = new Plane("Самолёт",120000, 800, 600.68);
        Ship kater = new Ship("Катер",1815, 60, 150.82);


      //  Logistics logistics = new Logistics(aircraft,tanker, kater, trailer_truck,aircraft);
       // logistics.getShipping(Tver,1500,3);

        TransportCreater transportCreater = new TransportFactory();
        Transport transport = transportCreater.createTransport().getTransport(Mosсow,1700,3);
        System.out.println(transport instanceof Plane);


    }


}
